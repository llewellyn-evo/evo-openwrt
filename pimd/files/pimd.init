#!/bin/sh /etc/rc.common

START=65
STOP=70

USE_PROCD=1
PROG=/usr/sbin/pimd
NAME=pimd
PIDCOUNT=0
EXTRA_COMMANDS="suspend resume"

CONFIGFILE=/var/run/$NAME.conf

LOG_ERR='logger -p daemon.err -t pimd-initscript --'
LOG_WARN='logger -p daemon.warn -t pimd-initscript --'
LOG_INFO='logger -p daemon.info -t pimd-initscript --'
LOG_DBG='logger -p daemon.debug -t pimd-initscript --'


UciState() {
	uci -P /tmp/state "$@"
}

validate_section()
{
	local var
	local file=/tmp/validate_pimd.$$

	uci_validate_section "$@" >$file 2>&1
	var=$?

	[ $var != 0 ] && $LOG_DBG <$file
	rm -f $file

	return $?
}

validate_pimd()
{
	validate_section pimd pimd "${1}" \
		'enable:bool:0' \
		'hello_interval:range(5,18724):30' \
		'default_route_metric:range(1,1024):1024' \
		'default_route_distance:range(1,255):101' \
		'igmp_query_interval:range(2,36000):125' \
		'igmp_querier_timeout:min(5):255' \
		'debug_options:string' \
		'bsr_candidate:bool:1' \
		'bsr_priority:range(0,255):5' \
		'bsr_ip:or(uci("network","@interface"),ip4addr)' \
		'bsr_interval:range(10,26214):60' \
		'rp_candidate:bool:1' \
		'rp_priority:range(0,255):20' \
		'rp_ip:or(uci("network","@interface"),ip4addr)' \
		'rp_time:range(10,16383):60' \
		'spt_mode:string:packets' \
		'spt_threshold:integer:0' \
		'spt_interval:integer:100' \
		'loglevel:range(2,7):4'
	return $?
}

validate_candidate_group()
{
	validate_section pimd rp_candidate_group "${1}" \
		'grp_prefix:cidr4:224.0.0.0/4'
	return $?
}

validate_rendezvous_point_addr()
{
	validate_section pimd rp_static_addr "${1}" \
		'grp_prefix:cidr4' \
		'rp_addr:ip4addr'
	return $?
}

validate_interface()
{
	validate_section pimd interface "${1}" \
		'ignore:bool:1' \
		'ttl_threshold:range(1,255):1' \
		'dr_priority:min(1):1' \
		'igmp_version:string' \
		'preference:range(1,255)' \
		'metric:range(1,1024)'
	return $?
}

add_candidate_group() {
	local grp_prefix

	validate_candidate_group "$1" || {
		$LOG_ERR local RP groups configuration is invalid
		exit 1
	}
	if [ -z "$grp_prefix" ]; then
		$LOG_WARN "Missing candidate RP group"
	else
		echo '	'group-prefix $grp_prefix >>$CONFIGFILE
	fi
}

add_rendezvous_point_addr() {
	local grp_prefix rp_addr

	validate_rendezvous_point_addr "$1" || {
		$LOG_ERR static RP address configuration is invalid
		exit 1
	}

	if [ -z "$rp_addr" ]; then
		$LOG_WARN "Group $grp_prefix associated with missing static RP address"
	else
		echo rp-address $rp_addr $grp_prefix >>$CONFIGFILE
	fi
}

start_service()
{
	local enable loglevel igmp_query_interval igmp_querier_timeout
	local bsr_candidate bsr_priority bsr_ip bsr_interval
	local rp_candidate rp_priority rp_time spt_mode spt_threshold
	local spt_interval debug_options command
	local L L2=none L3=error L4=warning L5=notice L6=info L7=debug

	. /lib/functions.sh
	. /lib/functions/network.sh

	config_load "${NAME}"

	validate_pimd pimd || {
		$LOG_ERR configuration validation failed
		return 1
	}
	debug_options="${debug_options// /,}"

	UciState set pimd.pimd.current_activation_state="$enable"
	[ 1 = "$enable" ] || return

	echo "# auto-generated from /etc/config/${NAME}" >$CONFIGFILE
	echo "disable-vifs" >>$CONFIGFILE	# default to all vifs disabled
	[ -n "$hello_interval" ] &&
		echo "hello-interval $hello_interval" >>$CONFIGFILE
	[ -n "$default_route_metric" ] &&
		echo "default-route-metric $default_route_metric" >>$CONFIGFILE
	[ -n "$default_route_distance" ] &&
		echo "default-route-distance $default_route_distance" >>$CONFIGFILE
	[ -n "$igmp_query_interval" ] &&
		echo "igmp-query-interval $igmp_query_interval" >>$CONFIGFILE
	[ -n "$igmp_querier_timeout" ] &&
		echo "igmp-querier-timeout $igmp_querier_timeout" >>$CONFIGFILE

	local ifobj interface proto l3_device device
	local ignore igmp_version dr_priority ttl_threshold preference metric
	for ifobj in `ubus list network.interface.\*`; do
		interface="${ifobj##network.interface.}"
		validate_interface $interface

		local timer
		for timer in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
			network_get_protocol proto $interface
			network_get_device l3_device $interface
			network_get_physdev device $interface

			[ $proto != static -a $proto != dhcp -a $proto != vrrp ] && break
			[ "$l3_device" != "" ] && break
			$LOG_DBG "waiting for $interface to come up $timer/15"
			sleep 1
			network_flush_cache
		done

		$LOG_DBG $i: $interface/$l3_device/l2=$device $proto $ignore
		l3_device=${l3_device:-$device}

		case $interface/$l3_device/$proto/$ignore in
			loopback/*/*/*)	continue;; # 127.0.0.1
			*//*/*)		continue;; # not an IP iface
			*/*/*/1)	continue;; # iface disabled
			*/*/static/*|*/*/dhcp/*|*/*/vrrp/*);; # OK !
			*)		continue;;
		esac

		echo -n "phyint $l3_device enable $igmp_version" >>$CONFIGFILE
		[ -n "$dr_priority" ]	&& echo -n " dr-priority $dr_priority" >>$CONFIGFILE
		[ -n "$ttl_threshold" ]	&& echo -n " ttl-threshold $ttl_threshold" >>$CONFIGFILE
		[ -n "$preference" ]	&& echo -n " distance $preference" >>$CONFIGFILE
		[ -n "$metric" ]	&& echo -n " metric $metric" >>$CONFIGFILE
		echo >>$CONFIGFILE

		[ "$interface" = "$bsr_ip" ] && bsr_ip=$l3_device
		[ "$interface" = "$rp_ip" ] && rp_ip=$l3_device
	done

	[ "$bsr_candidate" = 1 ] &&
		echo bsr-candidate $bsr_ip interval $bsr_interval priority $bsr_priority >>$CONFIGFILE
	if [ "$rp_candidate" = 1 ]; then
		echo rp-candidate $rp_ip interval $rp_time priority $rp_priority >>$CONFIGFILE
		config_foreach add_candidate_group rp_candidate_group
	fi
	[ "$spt_mode" = infinity ] && spt_threshold=
	L=$(eval echo \$L$loglevel)
	config_foreach add_rendezvous_point_addr rp_static_addr
	echo spt-threshold $spt_mode $spt_threshold interval $spt_interval >>$CONFIGFILE

	command="$PROG --config=$CONFIGFILE"		# config file
	command="$command --foreground"			# foreground
	command="$command -s -l $L"			# syslog level

	$LOG_INFO starting: $command
	UciState set pimd.pimd.current_command="$command"
	run_service
}


suspend()
{
	if [ "$(UciState get pimd.pimd.current_activation_state)" = 1 ]; then
		$LOG_INFO suspending
		stop
	fi
}

resume()
{
	if [ "$(UciState get pimd.pimd.current_activation_state)" = 1 ]; then
		$LOG_INFO resuming
		rc_procd run_service "$@"
	fi
}

run_service()
{
	local command=$(UciState get pimd.pimd.current_command)
	procd_open_instance
	procd_set_param respawn
	procd_set_param command $command
	procd_set_param file $CONFIGFILE
	procd_close_instance
}

service_triggers()
{
	procd_open_trigger
	procd_add_config_trigger "config.change" "pimd" /etc/init.d/pimd reload
	procd_add_config_trigger "config.change" "network" /etc/init.d/pimd reload
	procd_add_validation validate_pimd
	procd_add_validation validate_candidate_group
	procd_add_validation validate_rendezvous_point_addr
	procd_add_validation validate_interface
	procd_close_trigger
}
